<template>
  <div class="app-container">
    <el-row :gutter="20">
      <!--部门数据-->
      <!--用户数据-->
      <el-col :span="20" :xs="24">
        <el-form
          :model="queryParams"
          ref="queryForm"
          :inline="true"
          v-show="showSearch"
          label-width="68px"
        >
          <el-form-item label="用户名称" prop="userName">
            <el-input
              v-model="queryParams.userName"
              placeholder="请输入用户名称"
              clearable
              size="small"
              style="width: 240px"
              @keyup.enter.native="handleQuery"
            />
          </el-form-item>
          <el-form-item label="手机号码" prop="phonenumber">
            <el-input
              v-model="queryParams.phonenumber"
              placeholder="请输入手机号码"
              clearable
              :disabled="true"
              size="small"
              style="width: 240px"
              @keyup.enter.native="handleQuery"
            />
          </el-form-item>
          <el-form-item label="状态" prop="status">
            <el-select
              v-model="queryParams.status"
              placeholder="用户状态"
              clearable
              size="small"
              style="width: 240px"
            >
              <el-option
                v-for="dict in statusOptions"
                :key="dict.dictValue"
                :label="dict.dictLabel"
                :value="dict.dictValue"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="创建时间">
            <el-date-picker
              v-model="dateRange"
              size="small"
              style="width: 240px"
              value-format="yyyy-MM-dd"
              type="daterange"
              range-separator="-"
              start-placeholder="开始日期"
              end-placeholder="结束日期"
            ></el-date-picker>
          </el-form-item>
          <el-form-item>
            <el-button
              type="primary"
              icon="el-icon-search"
              size="mini"
              @click="handleQuery"
              >搜索</el-button
            >
            <el-button icon="el-icon-refresh" size="mini" @click="resetQuery"
              >重置</el-button
            >
          </el-form-item>

          <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
              <el-button
                type="primary"
                plain
                icon="el-icon-plus"
                size="mini"
                @click="handleAdd"
                v-hasPermi="['system:user:add']"
                >新增
              </el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button
                type="success"
                plain
                icon="el-icon-edit"
                size="mini"
                :disabled="single"
                @click="handleUpdate"
                v-hasPermi="['system:user:edit']"
                >修改
              </el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button
                type="danger"
                plain
                icon="el-icon-delete"
                size="mini"
                :disabled="multiple"
                @click="handleDelete"
                v-hasPermi="['system:user:remove']"
                >删除
              </el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button
                type="info"
                plain
                icon="el-icon-upload2"
                size="mini"
                @click="handleImport"
                v-hasPermi="['system:user:import']"
                >导入
              </el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button
                type="warning"
                plain
                icon="el-icon-download"
                size="mini"
                @click="handleExport"
                v-hasPermi="['system:user:export']"
                >导出
              </el-button>
            </el-col>
            <right-toolbar
              :showSearch.sync="showSearch"
              @queryTable="getList"
              :columns="columns"
            ></right-toolbar>
          </el-row>

          <el-table
            v-loading="loading"
            :data="userList"
            @selection-change="handleSelectionChange"
            border
            :header-cell-style="{ background: '#409EFF', color: '#ffffff' }"
          >
            <el-table-column type="selection" width="50" align="center" />
            <el-table-column
              label="序号"
              align="center"
              key="userId"
              prop="userId"
              v-if="columns[0].visible"
            />
            <el-table-column
              label="登录手机号码"
              align="center"
              key="phonenumber"
              prop="phonenumber"
              v-if="columns[1].visible"
              width="120"
            />
            <el-table-column
              label="姓名"
              align="center"
              key="nickName"
              prop="nickName"
              v-if="columns[2].visible"
              :show-overflow-tooltip="true"
            />

            <el-table-column
              label="所属角色"
              align="center"
              key="roleNames"
              prop="roleNames"
              v-if="columns[3].visible"
              :show-overflow-tooltip="true"
            >
            </el-table-column>

            <el-table-column
              label="备注"
              align="center"
              key="remark"
              prop="remark"
              v-if="columns[4].visible"
            />

            <el-table-column
              label="最后登录时间"
              align="center"
              key="loginDate"
              v-if="columns[5].visible"
            >
              <template slot-scope="scope">
                <!-- <el-switch
                  v-model="scope.row.status"
                  active-value="0"
                  inactive-value="1"
                  @change="handleStatusChange(scope.row)"
                ></el-switch>-->
                <span>{{ parseTime(scope.row.loginDate) }}</span>
              </template>
            </el-table-column>
            <el-table-column
              label="创建人"
              align="center"
              key="create_by"
              prop="createBy"
              v-if="columns[1].visible"
              :show-overflow-tooltip="true"
            >
            </el-table-column>
            <el-table-column
              label="创建时间"
              align="center"
              prop="createTime"
              v-if="columns[6].visible"
              width="160"
            >
              <template slot-scope="scope">
                <span>{{ parseTime(scope.row.createTime) }}</span>
              </template>
            </el-table-column>
            <el-table-column
              label="状态"
              align="center"
              key="status"
              v-if="columns[5].visible"
            >
              <template slot-scope="scope">
                <el-switch
                  v-model="scope.row.status"
                  active-value="0"
                  inactive-value="1"
                  @change="handleStatusChange(scope.row)"
                ></el-switch>
              </template>
            </el-table-column>
            <el-table-column
              label="操作"
              align="center"
              width="160"
              class-name="small-padding fixed-width"
            >
              <template slot-scope="scope">
                <el-button
                  size="mini"
                  type="text"
                  icon="el-icon-edit"
                  @click="handleUpdate(scope.row)"
                  v-hasPermi="['system:user:edit']"
                  >修改
                </el-button>
                <el-button
                  v-if="scope.row.userId !== 1"
                  size="mini"
                  type="text"
                  icon="el-icon-delete"
                  @click="handleDelete(scope.row)"
                  v-hasPermi="['system:user:remove']"
                  >删除
                </el-button>
                <el-button
                  v-if="scope.row.userId !== 1"
                  type="text"
                  plain
                  icon="el-icon-edit"
                  size="mini"
                  @click="Assign(scope.row)"
                  v-hasPermi="['system:user:roleList']"
                  >分配角色
                </el-button>
                <el-button
                  v-if="scope.row.userId !== 1"
                  type="text"
                  plain
                  icon="el-icon-edit"
                  size="mini"
                  @click="companySelect(scope.row)"
                  v-hasPermi="['system:company:userCompanyList']"
                  >分配数据
                </el-button>
                <el-button
                  v-if="scope.row.userId !== 1"
                  type="text"
                  plain
                  icon="el-icon-edit"
                  size="mini"
                  @click="Jurisdiction(scope.row)"
                  v-hasPermi="['system:user:menuList']"
                  >分配权限
                </el-button>
              </template>
            </el-table-column>
          </el-table>
        </el-form>
        <pagination
          v-show="total > 0"
          :total="total"
          :page.sync="queryParams.pageNum"
          :limit.sync="queryParams.pageSize"
          @pagination="getList"
        />
      </el-col>
    </el-row>

    <!-- 添加或修改参数配置对话框 -->
    <el-dialog :title="title" :visible.sync="open" width="600px" append-to-body>
      <el-form ref="form" :model="form" :rules="rules" label-width="80px">
        <el-row>
          <el-col :span="12">
            <el-form-item label="姓名" prop="nickName">
              <el-input v-model="form.nickName" placeholder="姓名" />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="归属部门" prop="deptId">
              <treeselect
                v-model="form.deptId"
                :options="deptOptions"
                :show-count="true"
                placeholder="请选择归属部门"
              />
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <!--:disabled="true"-->
            <el-form-item label="手机号码" prop="phonenumber">
              <el-input
                v-model="form.phonenumber"
                placeholder="请输入手机号码"
                maxlength="11"
              />
            </el-form-item>
          </el-col>
        </el-row>

        <el-row>
          <el-col :span="24">
            <el-form-item label="备注">
              <el-input
                v-model="form.remark"
                type="textarea"
                placeholder="请输入内容"
                clearable
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm">确 定</el-button>
        <el-button @click="cancel">取 消</el-button>
      </div>
    </el-dialog>

    <!-- 用户导入对话框 -->
    <el-dialog
      :title="upload.title"
      :visible.sync="upload.open"
      width="400px"
      append-to-body
    >
      <el-upload
        ref="upload"
        :limit="1"
        accept=".xlsx, .xls"
        :headers="upload.headers"
        :action="upload.url + '?updateSupport=' + upload.updateSupport"
        :disabled="upload.isUploading"
        :on-progress="handleFileUploadProgress"
        :on-success="handleFileSuccess"
        :auto-upload="false"
        drag
      >
        <i class="el-icon-upload"></i>
        <div class="el-upload__text">
          将文件拖到此处，或
          <em>点击上传</em>
        </div>
        <div class="el-upload__tip" slot="tip">
          <el-checkbox v-model="upload.updateSupport" />
          是否更新已经存在的用户数据
          <el-link type="info" style="font-size: 12px" @click="importTemplate"
            >下载模板</el-link
          >
        </div>
        <div class="el-upload__tip" style="color: red" slot="tip">
          提示：仅允许导入“xls”或“xlsx”格式文件！
        </div>
      </el-upload>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitFileForm">确 定</el-button>
        <el-button @click="upload.open = false">取 消</el-button>
      </div>
    </el-dialog>

    <!-- 分配角色对话框 -->
    <el-dialog
      :title="title"
      :visible.sync="jueseopen"
      label-width="600px"
      height="500px"
      append-to-body
    >
      <el-form
        ref="roleFormData"
        :model="roleFormData"
        :rules="rules"
        size="medium"
        label-width="100px"
      >
        <el-col :span="15">
          <el-form-item label="选择角色" prop="field">
            <el-checkbox
              :indeterminate="isIndeterminate"
              v-model="checkAll"
              @change="roleHandleCheckAllChange"
              >全选
            </el-checkbox>

            <el-checkbox-group
              v-model="roleFormData.field"
              size="medium"
              @change="roleHandleCheckedCitiesChange"
            >
              <el-checkbox
                v-for="(item, index) in roleFieldOptions"
                :key="index"
                :label="item.roleId"
                :disabled="item.disabled"
                >{{ item.roleName }}
              </el-checkbox>
            </el-checkbox-group>
          </el-form-item>
        </el-col>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button
          type="primary"
          v-hasPermi="['system:user:editUserRole']"
          @click="submitUserRoleForm"
          >确 定</el-button
        >
        <el-button @click="jueseopen = false">取 消</el-button>
      </div>
    </el-dialog>

    <!-- 分配公司数据对话框 -->
    <el-dialog
      :title="title"
      :visible.sync="companyOpen"
      label-width="600px"
      height="500px"
      append-to-body
    >
      <el-form
        ref="companyFormData"
        :model="companyFormData"
        :rules="rules"
        size="medium"
        label-width="100px"
      >
        <el-col :span="15">
          <el-form-item label="选择角色" prop="companyfield">
            <el-checkbox
              :indeterminate="companyIsIndeterminate"
              v-model="companyCheckAll"
              @change="companyHandleCheckAllChange"
              >全选
            </el-checkbox>

            <el-checkbox-group
              v-model="companyFormData.companyfield"
              size="medium"
              @change="companyHandleCheckedCitiesChange"
            >
              <el-checkbox
                v-for="(item, index) in companyFieldOptions"
                :key="index"
                :label="item.companyId"
                :disabled="item.disabled"
                >{{ item.companyName }}
              </el-checkbox>
            </el-checkbox-group>
          </el-form-item>
        </el-col>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button
          type="primary"
          v-hasPermi="['system:company:editUserCompany']"
          @click="submitUserCompanyForm"
          >确 定</el-button
        >
        <el-button @click="companyOpen = false">取 消</el-button>
      </div>
    </el-dialog>

    <!-- 分配权限 -->

    <el-dialog
      :title="title"
      :visible.sync="quanxianopen"
      width="90%"
      style="height: 95%"
      append-to-body
      :close-on-press-escape="false"
      :close-on-click-modal="false"
    >
      <el-form
        ref="menuForm"
        :model="menuForm"
        :rules="rules"
        label-width="100px"
      >
        <el-form-item label="菜单权限">
          <el-checkbox
            v-model="menuExpand"
            @change="handleCheckedTreeExpand($event, 'menu')"
            >展开/折叠</el-checkbox
          >
          <el-checkbox
            v-model="menuNodeAll"
            @change="handleCheckedTreeNodeAll($event, 'menu')"
            >全选/全不选</el-checkbox
          >
          <el-checkbox
            v-model="menuForm.menuCheckStrictly"
            @change="handleCheckedTreeConnect($event, 'menu')"
            >父子联动
          </el-checkbox>
          <el-tree
            :data="menuOptions"
            show-checkbox
            default-expand-all
            ref="menu"
            node-key="id"
            :check-strictly="!menuForm.menuCheckStrictly"
            empty-text="加载中，请稍后"
            :props="defaultProps"
            :expand-on-click-node="false"
            :highlight-current="true"
            :render-content="renderContent"
          ></el-tree>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button
          type="primary"
          v-hasPermi="['system:user:editUserMenu']"
          @click="submitUserMenuIdsForm"
          >确 定</el-button
        >
        <el-button @click="quanxianopen = false">取 消</el-button>
      </div>
    </el-dialog>

    <!--    123-->
  </div>
</template>


<script>
import {
  listUser,
  getUser,
  delUser,
  addUser,
  updateUser,
  resetUserPwd,
  changeUserStatus,
  getAssign,
  updateUserRoleID,
  updateUserMenuID,
  roleMenuTreeselect,
  getUserCompanyList,
  updateUserCompanyID
} from '@/api/system/user'
import {
  getToken
} from '@/utils/auth'
import {
  treeselect
} from '@/api/system/dept'
import Treeselect from '@riophae/vue-treeselect'
import '@riophae/vue-treeselect/dist/vue-treeselect.css'

export default {
  name: 'User',
  components: {
    Treeselect
  },
  data () {
    return {
      // 遮罩层
      loading: true,
      // 选中数组
      ids: [],
      // 非单个禁用
      single: true,
      // 非多个禁用
      multiple: true,
      // 显示搜索条件
      showSearch: true,
      // 总条数
      total: 0,
      // 用户表格数据
      userList: null,
      // 弹出层标题
      title: '',
      // 部门树选项
      deptOptions: undefined,
      // 是否显示弹出层
      open: false,
      jueseopen: false, //分配角色弹出层
      companyOpen: false, //分配角色弹出层
      quanxianopen: false,//权限分配



      // 部门名称
      deptName: undefined,
      // 默认密码
      initPassword: undefined,
      // 日期范围
      dateRange: [],
      // 状态数据字典
      statusOptions: [],
      // 性别状态字典
      sexOptions: [],
      // 岗位选项
      postOptions: [],
      // 角色选项
      roleOptions: [],
      // 表单参数
      form: {},
      defaultProps: {
        children: 'children',
        label: 'label'
      },
      // 用户导入参数
      upload: {
        // 是否显示弹出层（用户导入）
        open: false,
        // 弹出层标题（用户导入）
        title: '',
        // 是否禁用上传
        isUploading: false,
        // 是否更新已经存在的用户数据
        updateSupport: 0,
        // 设置上传的请求头部
        headers: {
          Authorization: 'Bearer ' + getToken()
        },
        // 上传的地址
        url: process.env.VUE_APP_BASE_API + '/system/user/importData'
      },
      // 查询参数
      queryParams: {
        pageNum: 1,
        pageSize: 10,
        userName: undefined,
        phonenumber: undefined,
        status: undefined,
        deptId: undefined
      },
      // 列信息
      columns: [{
        key: 0,
        label: `用户编号`,
        visible: true
      },
      {
        key: 1,
        label: `用户名称`,
        visible: true
      },
      {
        key: 2,
        label: `用户昵称`,
        visible: true
      },
      {
        key: 3,
        label: `部门`,
        visible: true
      },
      {
        key: 4,
        label: `手机号码`,
        visible: true
      },
      {
        key: 5,
        label: `状态`,
        visible: true
      },
      {
        key: 6,
        label: `创建时间`,
        visible: true
      }
      ],
      // 表单校验
      rules: {
        userName: [{
          required: true,
          message: '用户名称不能为空',
          trigger: 'blur'
        }],
        nickName: [{
          required: true,
          message: '用户昵称不能为空',
          trigger: 'blur'
        }],
        password: [{
          required: true,
          message: '用户密码不能为空',
          trigger: 'blur'
        }],
        email: [{
          type: 'email',
          message: '\'请输入正确的邮箱地址',
          trigger: ['blur', 'change']
        }],
        phonenumber: [{
          pattern: /^1[3|4|5|6|7|8|9][0-9]\d{8}$/,
          message: '请输入正确的手机号码',
          trigger: 'blur'
        }],
        field: [{
          required: true,
          type: 'array',
          message: '请至少选择一个角色',
          trigger: 'change'
        }],
        companyfield: [{
          required: true,
          type: 'array',
          message: '请至少选择一个公司',
          trigger: 'change'
        }]
      },
      ////角色
      checkAll: false,
      isIndeterminate: false,
      ////公司
      companyCheckAll: false,
      companyIsIndeterminate: false,

      //已勾选角色数据
      roleFormData: {
        field: []
      },

      //角色数据源
      roleFieldOptions: [],

      //已勾选公司数据范围数据
      companyFormData: {
        companyfield: []
      },

      //角色数据源
      companyFieldOptions: [],





      //分配权限的
      menuExpand: true,
      menuNodeAll: false,
      // 菜单列表
      menuOptions: [],
      menuForm: {
        menuIds: [],
        menuCheckStrictly: true

      }

    }
  },
  watch: {
    // 根据名称筛选部门树
    deptName (val) {
      this.$refs.tree.filter(val)
    }
  },
  created () {
    this.getList()
    this.getTreeselect()
    this.getDicts('sys_normal_disable').then(response => {
      this.statusOptions = response.data
    })
    this.getDicts('sys_user_sex').then(response => {
      this.sexOptions = response.data
    })
    this.getConfigKey('sys.user.initPassword').then(response => {
      this.initPassword = response.msg
    })
  },
  methods: {
    /** 查询用户列表 */
    getList () {
      this.loading = true
      listUser(this.addDateRange(this.queryParams, this.dateRange)).then(response => {
        this.userList = response.rows
        this.total = response.total
        this.loading = false
      })
    },
    /** 查询部门下拉树结构 */
    getTreeselect () {
      treeselect().then(response => {
        this.deptOptions = response.data
      })
    },
    // 筛选节点
    filterNode (value, data) {
      if (!value) return true
      return data.label.indexOf(value) !== -1
    },
    // 节点单击事件
    handleNodeClick (data) {
      this.queryParams.deptId = data.id
      this.getList()
    },
    // 用户状态修改
    handleStatusChange (row) {
      let text = row.status === '0' ? '启用' : '停用'
      this.$confirm('确认要"' + text + '""' + row.userName + '"用户吗?', '警告', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(function () {
        return changeUserStatus(row.userId, row.status)
      }).then(() => {
        this.msgSuccess(text + '成功')
      }).catch(function () {
        row.status = row.status === '0' ? '1' : '0'
      })
    },
    // 取消按钮
    cancel () {
      this.open = false
      this.reset()
    },
    // 表单重置
    reset () {
      this.form = {
        userId: undefined,
        roleId: undefined,
        deptId: undefined,
        userName: undefined,
        nickName: undefined,
        password: undefined,
        phonenumber: undefined,
        email: undefined,
        sex: undefined,
        status: '0',
        remark: undefined,
        postIds: [],
        roleIds: []
      }
      this.resetForm('form')
    },
    /** 搜索按钮操作 */
    handleQuery () {
      this.queryParams.page = 1
      this.getList()
    },
    /** 重置按钮操作 */
    resetQuery () {
      this.dateRange = []
      this.resetForm('queryForm')
      this.handleQuery()
    },
    // 多选框选中数据
    handleSelectionChange (selection) {
      this.ids = selection.map(item => item.userId)
      this.single = selection.length != 1
      this.multiple = !selection.length
    },
    /** 新增按钮操作 */
    handleAdd () {
      this.reset()
      this.getTreeselect()
      getUser().then(response => {
        this.postOptions = response.posts
        this.roleOptions = response.roles
        this.open = true
        this.title = '添加用户'
        this.form.password = this.initPassword
      })
    },
    /** 修改按钮操作 */
    handleUpdate (row) {
      this.reset()
      this.getTreeselect()
      const userId = row.userId || this.ids
      getUser(userId).then(response => {
        this.form = response.data
        this.postOptions = response.posts
        this.roleOptions = response.roles
        this.form.postIds = response.postIds
        this.form.roleIds = response.roleIds
        this.open = true
        this.title = '修改用户'
        this.form.password = ''
      })
    },
    /** 重置密码按钮操作 */
    handleResetPwd (row) {
      this.$prompt('请输入"' + row.userName + '"的新密码', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消'
      }).then(({
        value
      }) => {
        resetUserPwd(row.userId, value).then(response => {
          this.msgSuccess('修改成功，新密码是：' + value)
        })
      }).catch(() => {
      })
    },
    /** 提交按钮 */
    submitForm: function () {
      this.$refs['form'].validate(valid => {
        if (valid) {
          if (this.form.userId != undefined) {
            updateUser(this.form).then(response => {
              this.msgSuccess('修改成功')
              this.open = false
              this.getList()
            })
          } else {
            addUser(this.form).then(response => {
              this.msgSuccess('新增成功')
              this.open = false
              this.getList()
            })
          }
        }
      })
    },
    /** 删除按钮操作 */
    handleDelete (row) {
      const userIds = row.userId || this.ids
      this.$confirm('是否确认删除用户编号为"' + userIds + '"的数据项?', '警告', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(function () {
        return delUser(userIds)
      }).then(() => {
        this.getList()
        this.msgSuccess('删除成功')
      })
    },
    /** 导出按钮操作 */
    handleExport () {
      this.download('system/user/export', {
        ...this.queryParams
      }, `user_${new Date().getTime()}.xlsx`)
    },
    /** 导入按钮操作 */
    handleImport () {
      this.upload.title = '用户导入'
      this.upload.open = true
    },
    /** 下载模板操作 */
    importTemplate () {
      this.download('system/user/importTemplate', {
        ...this.queryParams
      }, `user_${new Date().getTime()}.xlsx`)
    },
    // 文件上传中处理
    handleFileUploadProgress (event, file, fileList) {
      this.upload.isUploading = true
    },
    // 文件上传成功处理
    handleFileSuccess (response, file, fileList) {
      this.upload.open = false
      this.upload.isUploading = false
      this.$refs.upload.clearFiles()
      this.$alert(response.msg, '导入结果', {
        dangerouslyUseHTMLString: true
      })
      this.getList()
    },
    // 提交上传文件
    submitFileForm () {
      this.$refs.upload.submit()
    },
    // 、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
    //分配角色
    Assign (row) {
      // this.reset();
      // this.getTreeselect();
      this.title = '分配角色'
      this.jueseopen = true

      this.checkAll = false
      this.isIndeterminate = false
      this.roleFieldOptions = []
      this.roleFormData.field = []

      const userId = row.userId || this.ids
      getAssign(userId).then(response => {
        this.roleFieldOptions = response.roles
        this.roleFormData.field = response.roleIds
        this.title = '分配角色'
        this.jueseopen = true
        this.form.userId = userId
        if (this.roleFieldOptions.length == this.roleFormData.field.length) {
          this.checkAll = true
          this.isIndeterminate = false

        } else if (this.roleFormData.field.length > 0) {

          this.checkAll = false
          this.isIndeterminate = true
        } else {

          this.checkAll = false
          this.isIndeterminate = false
        }
      })

    },
    // 角色权限按钮？
    roleHandleCheckAllChange (val) {
      this.roleFormData.field = []
      this.roleFieldOptions.forEach(item => {
        this.roleFormData.field.push(item.roleId)
      })
      this.roleFormData.field = val ? this.roleFormData.field : []
      this.isIndeterminate = false
    },
    ///角色单选事件
    roleHandleCheckedCitiesChange (value) {
      let checkedCount = value.length   //选中值的长度
      this.checkAll = checkedCount === this.roleFieldOptions.length
      this.isIndeterminate = checkedCount > 0 && checkedCount < this.roleFieldOptions.length

    },
    ////角色提交
    submitUserRoleForm () {
      this.$refs['roleFormData'].validate(valid => {
        if (valid) {
          if (this.form.userId != undefined) {
            let roleData = {
              userId: this.form.userId,
              roleIds: this.roleFormData.field
            }
            updateUserRoleID(roleData).then(response => {
              this.msgSuccess('更新成功')
              this.jueseopen = false
              this.getList()
            })

          } else {
            this.msgError('用户信息异常！')
          }
        } else {
          this.msgError('请完成必填项！')
        }
      })

    },

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //分配公司数据范围
    companySelect (row) {

      this.title = '分配角色'
      this.companyOpen = true

      this.companyCheckAll = false
      this.companyIsIndeterminate = false

      this.companyFieldOptions = []
      this.companyFormData.companyfield = []

      const userId = row.userId || this.ids
      getUserCompanyList(userId).then(response => {
        this.companyFieldOptions = response.companys
        this.companyFormData.companyfield = response.companyIds
        this.title = '分配公司数据范围'
        this.companyOpen = true
        this.form.userId = userId
        if (this.companyFieldOptions.length == this.companyFormData.companyfield.length) {
          this.companyCheckAll = true
          this.companyIsIndeterminate = false

        } else if (this.companyFormData.companyfield.length > 0) {

          this.companyCheckAll = false
          this.companyIsIndeterminate = true
        } else {

          this.companyCheckAll = false
          this.companyIsIndeterminate = false
        }
      })

    },
    // 角色权限按钮？
    companyHandleCheckAllChange (val) {
      this.companyFormData.companyfield = []
      this.companyFieldOptions.forEach(item => {
        this.companyFormData.companyfield.push(item.companyId)
      })
      this.companyFormData.companyfield = val ? this.companyFormData.companyfield : []
      this.companyIsIndeterminate = false
    },
    ///角色单选事件
    companyHandleCheckedCitiesChange (value) {
      let checkedCount = value.length   //选中值的长度
      this.companyCheckAll = checkedCount === this.companyFieldOptions.length
      this.companyIsIndeterminate = checkedCount > 0 && checkedCount < this.companyFieldOptions.length

    },
    ////角色提交
    submitUserCompanyForm () {
      this.$refs['companyFormData'].validate(valid => {
        if (valid) {
          if (this.form.userId != undefined) {
            let companyData = {
              userId: this.form.userId,
              companyIds: this.companyFormData.companyfield
            }

            updateUserCompanyID(companyData).then(response => {
              this.msgSuccess('更新成功')
              this.companyOpen = false
              this.getList()
            })

          } else {
            this.msgError('用户信息异常！')
          }
        } else {
          this.msgError('请完成必填项！')
        }
      })

    },

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //分配权限
    Jurisdiction (row) {
      this.title = '分配权限菜单'
      this.quanxianopen = true
      const userId = row.userId || this.ids
      const roleId = row.roleId || this.ids
      const roleMenu = this.getRoleMenuTreeselect(row.roleId)
      this.form.userId = userId
      this.form.roleId = roleId

      this.$nextTick(() => {
        roleMenu.then(res => {
          let checkedKeys = res.checkedKeys

          this.changeCss()///横向展开

          checkedKeys.forEach((v) => {
            this.$nextTick(() => {
              this.$refs.menu.setChecked(v, true, false)
            })
          })
        })
      })

    },
    /** 根据角色ID查询菜单树结构 */
    getRoleMenuTreeselect (roleId) {
      return roleMenuTreeselect(roleId).then(response => {
        this.menuOptions = response.menus
        return response
      })
    },

    // 树权限（展开/折叠）
    handleCheckedTreeExpand (value, type) {
      if (type == 'menu') {
        let treeList = this.menuOptions
        for (let i = 0; i < treeList.length; i++) {
          this.$refs.menu.store.nodesMap[treeList[i].id].expanded = value
        }
      }
    },
    // 树权限（全选/全不选）
    handleCheckedTreeNodeAll (value, type) {
      if (type == 'menu') {
        this.$refs.menu.setCheckedNodes(value ? this.menuOptions : [])
      }
    },
    // 树权限（父子联动）
    handleCheckedTreeConnect (value, type) {
      if (type == 'menu') {
        this.form.menuCheckStrictly = value ? true : false
      }
    },
    // 所有菜单节点数据
    getMenuAllCheckedKeys () {
      // 目前被选中的菜单节点
      let checkedKeys = this.$refs.menu.getCheckedKeys()
      // 半选中的菜单节点
      let halfCheckedKeys = this.$refs.menu.getHalfCheckedKeys()
      checkedKeys.unshift.apply(checkedKeys, halfCheckedKeys)
      return checkedKeys
    },

    ////角色提交
    submitUserMenuIdsForm () {
      this.$refs['menuForm'].validate(valid => {
        if (valid) {
          if (this.form.userId != undefined) {
            this.menuForm.menuIds = this.getMenuAllCheckedKeys();///获取选择菜单ID

            let menuData = {
              roleId: this.form.roleId,
              menuIds: this.menuForm.menuIds
            };
            updateUserMenuID(menuData).then(response => {
              this.msgSuccess('更新成功')
              this.quanxianopen = false
              this.getList()
            })

          } else {
            this.msgError('用户信息异常！')
          }
        } else {
          this.msgError('请完成必填项！')
        }
      })

    },

    ////菜单展开样式

    changeCss () {
      var levelName_one = document.getElementsByClassName('custom-tree-one') // levelname是上面的最底层节点的名字
      for (var i = 0; i < levelName_one.length; i++) {
        // cssFloat 兼容 ie6-8  styleFloat 兼容ie9及标准浏览器
        // levelName_one[i].parentNode.style.cssFloat = "left"; // 最底层的节点，包括多选框和名字都让他左浮动
        levelName_one[i].parentNode.style.styleFloat = 'left'
        levelName_one[i].parentNode.style.styleFloat = 'left'
        levelName_one[i].parentNode.style.color = '#000000'
        levelName_one[i].parentNode.style.fontSize = '18px'
        // levelName_one[i].parentNode.style.backgroundColor = '#999999'

      }
      var levelName_two = document.getElementsByClassName('custom-tree-two') // levelname是上面的最底层节点的名字
      for (var i = 0; i < levelName_two.length; i++) {
        // cssFloat 兼容 ie6-8  styleFloat 兼容ie9及标准浏览器
        // levelName_two[i].parentNode.style.cssFloat = "left"; // 最底层的节点，包括多选框和名字都让他左浮动
        levelName_two[i].parentNode.style.styleFloat = 'left'
        levelName_two[i].parentNode.style.styleFloat = 'left'
        levelName_two[i].parentNode.style.color = 'blue'
        levelName_two[i].parentNode.style.fontSize = '16px'
        levelName_two[i].parentNode.style.marginTop = '10px'
        // levelName_two[i].parentNode.style.borderTop = 'solid 1px red'

      }

      var levelName_three = document.getElementsByClassName('custom-tree-three') // levelname是上面的最底层节点的名字
      for (var i = 0; i < levelName_three.length; i++) {
        // cssFloat 兼容 ie6-8  styleFloat 兼容ie9及标准浏览器
        levelName_three[i].parentNode.style.cssFloat = 'left' // 最底层的节点，包括多选框和名字都让他左浮动
        levelName_three[i].parentNode.style.styleFloat = 'left'
        levelName_three[i].parentNode.style.styleFloat = 'left'
        levelName_three[i].parentNode.style.color = '#1e6620'
        levelName_three[i].parentNode.style.fontSize = '16px'

      }

      var levelName_four = document.getElementsByClassName('custom-tree-four') // levelname是上面的最底层节点的名字
      for (var i = 0; i < levelName_four.length; i++) {
        // cssFloat 兼容 ie6-8  styleFloat 兼容ie9及标准浏览器
        // levelName_four[i].parentNode.style.cssFloat = "left"; // 最底层的节点，包括多选框和名字都让他左浮动
        levelName_four[i].parentNode.style.styleFloat = 'left'
        levelName_four[i].parentNode.style.styleFloat = 'left'
        levelName_four[i].parentNode.style.color = '#1e6620'
        levelName_four[i].parentNode.style.fontSize = '16px'

      }

    },

    renderContent (h, { node, data, store }) {
      let classname = ''
      // 由于项目中有三级菜单也有四级级菜单，就要在此做出判断
      if (node.level === 1) {
        classname = 'custom-tree-one'
      } else if (node.level === 2) {
        classname = 'custom-tree-two'
      } else if (node.level === 3) {
        classname = 'custom-tree-three'
      } else if (node.level === 4 && node.childNodes.length === 0) {
        classname = 'custom-tree-four'
      }

      return h(
        'p',
        {
          class: classname
        },
        node.label
      )
    }

  }
}

</script>
